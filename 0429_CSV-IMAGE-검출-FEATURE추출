import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import cv2
import pandas as pd
import numpy as np

sen_path = "./SENSING DATA"
now_dir = os.getcwd()
csv_file = os.listdir(sen_path)
i = 0
print(len(csv_file))

PNL =[]
XX = []
YY = []
WW = []
HH = []
AV = []
ST = []
AR = []

for x in csv_file:
    p = x[7:]
    print(p)
    csv_file_path = os.path.join(sen_path,x)
    i = i + 1
    print(i)
    print("Data loading 중")
    raw = np.loadtxt(csv_file_path, delimiter=",", dtype=np.float32)
    print("Data loading 완료")
    a = raw[:,1:]
    b = raw[:,0:-1]
    c = a - b
    d = c[:,1:]
    e = c[:,0:-1]
    f = d+e
    g = np.abs(f)
    # h = np.exp(g) # 지수 합수
    print(g.shape)
    j = g.mean(axis=0)
    index = np.arange(len(j))
    print("Image 생성 준비")
    fig = plt.figure(figsize=(153.61, 21.5))
    plt.axis('off')
    plt.xticks([]), plt.yticks([])
    plt.subplots_adjust(left=0, bottom=0, right=1, top=1, hspace=0, wspace=0)
    ax1 = sns.heatmap(g,cbar=False, vmax=50)
    plt.savefig("1)New_"+ x +".jpg", bbox_inches='tight',pad_inches=0)
    print("1)New 이미지 생성 완료")

    #■■■■■■■■■■■■■■■■■GRAY Image 생성■■■■■■■■■■■■■■■■■■■■■■■■■■
    img_name = now_dir + '\\1)New_' + x + '.jpg'
    img = cv2.imread(img_name, cv2.IMREAD_COLOR)
    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    cv2.imwrite("2)Gray_img" + x + ".jpg", img_gray)
    print("2)Gray 이미지 생성 완료")

    # ■■■■■■■■■■■■■■■■■Binary Image 생성■■■■■■■■■■■■■■■■■■■■■■■■■■
    ret, img_binary = cv2.threshold(img_gray, 80,255, cv2.THRESH_BINARY)
    cv2.imwrite("3)Gray_Binary_img" + x +".jpg", img_binary)
    print("3)Gray_Binary 이미지 생성 완료")

    # ■■■■■■■■■■■■■■■■■Erosion(침식) Dilation(팽창) Image 생성■■■■■■■■■■■■■■■■■■■■■■■■■■
    #// make kernel matrix for dilation and erosion (Use Numpy)
    kernel_size_row = 20
    kernel_size_col = 20
    kernel = np.ones((kernel_size_row, kernel_size_col), np.uint8)
    # erosion_image = cv2.erode(img_binary, kernel, iterations=1)  #// make erosion image
    dilation_image = cv2.dilate(img_binary, kernel, iterations=1)  #// make dilation image

    # ■■■■■■■■■■■■■■■■■ Result Image 생성 MASK 영상 ■■■■■■■■■■■■■■■■■■■■■■■■■■
    img_result = cv2.bitwise_and(img_gray, img_gray, mask=dilation_image)
    cv2.imwrite("3-1)Gray_Binary_img" + x + ".jpg", img_result)
    print("3-1)img_gray 검출 위치 이미지 생성 완료")

    # ■■■■■■■■■■■■■■■■■Contour 생성■■■■■■■■■■■■■■■■■■■■■■■■■■
    contours, hierarchy = cv2.findContours(dilation_image, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    # print(contours)
    # print(hierarchy)
    print(len(contours))
    for cnt in contours:
        x1, y1, w1, h1 = cv2.boundingRect(cnt)
        if h1 > 100 or w1 > 100:
            roi = img_gray[y1:y1+h1,x1:x1+w1]
            AVG = cv2.meanStdDev(roi)[0]
            print(AVG)
            STDEV = cv2.meanStdDev(roi)[1]
            print(STDEV)
            AREA = cv2.contourArea(cnt)
            print(AREA)
            print(x1,y1,w1,h1)
            PNL.append(str(p))
            XX.append(int(x1))
            YY.append(int(y1))
            WW.append(int(w1))
            HH.append(int(h1))
            AV.append(int(AVG)) # 평균
            ST.append(int(STDEV)) # 편차
            AR.append(int(AREA))  # 면적
            cv2.rectangle(img, (x1-50, y1-50), (x1 + w1+50, y1 + h1+50), (0, 255, 0), 2)

    cv2.imwrite("4)gray_box_img" + x + ".jpg", img)
    print("4)Gray_Box 이미지 생성 완료")
    # print(XX)
    # print(YY)
    # print(WW)
    # print(HH)
    SUM = PNL, XX, YY, WW, HH, AV, ST, AR
    print(SUM)
    df = pd.DataFrame(SUM)
    df = df.T
    df.columns = ["PANEL","X","Y","W","H","AVG","STDEV","AREA"]
    print(df)
    df.to_csv("X,Y좌표.csv")
    plt.clf()  # plt 제거
print("완료")

