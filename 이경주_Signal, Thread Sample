from PyQt5.QtWidgets import QWidget, QPushButton, QLabel, QVBoxLayout, QApplication
from PyQt5.QtCore import QObject
import sys

from PyQt5.QtCore import pyqtSignal, pyqtSlot
import time
from PyQt5.QtCore import QThread


# UI 생성
class Window(QWidget):
    def __init__(self):
        super().__init__()
        self.button_start = QPushButton('Start', self)
        self.button_cancel = QPushButton('Cancel', self)
        self.label_status = QLabel('status!!', self)
        layout = QVBoxLayout(self)
        layout.addWidget(self.button_start)
        layout.addWidget(self.button_cancel)
        layout.addWidget(self.label_status)
        self.setFixedSize(400, 200)

    # @pyqtSlot(int)
    def updateStatus(self, status):
        self.label_status.setText('{}'.format(status))

# 메인 Loop
class Worker(QObject):
    ## 시그널 객체를 하나 생성합니다.
    sig_numbers = pyqtSignal(int)

    def __init__(self, parent=None):
        super(self.__class__, self).__init__(parent)

    # @pyqtSlot()           ## 버튼이 클릭시 시그널을 받아들이는 슬롯을 하나 마련합니다.
    def startWork(self):
        _cnt = 0
        while _cnt < 10:
            _cnt += 1
            self.sig_numbers.emit(_cnt) ## pyqtSignal 에 숫자데이터를 넣어 보낸다
            print(_cnt)                 ## consol에서 어떻게 진행 되는지 보기 위해서 넣어준다
            time.sleep(1)


class Example(QObject):
    def __init__(self, parent=None):
        super(self.__class__, self).__init__(parent)
        self.gui = Window()
        ##################################################################
        self.worker = Worker()
        self.worker_thread = QThread()
        self.worker.moveToThread(self.worker_thread)
        self.worker_thread.start()
        self._connectSignals()
        ##################################################################
        self.gui.show()

    def _connectSignals(self):
        self.gui.button_start.clicked.connect(self.worker.startWork)
        self.worker.sig_numbers.connect(self.gui.updateStatus)
        self.gui.button_cancel.clicked.connect(self.forceWorkerReset)

    def forceWorkerReset(self):
        if self.worker_thread.isRunning():
            self.worker_thread.terminate()
            self.worker_thread.wait()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    example = Example(app)
    sys.exit(app.exec_())
